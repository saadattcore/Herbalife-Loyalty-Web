{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "Scripts/Spa/app.js",
    "Scripts/Spa/core/layout.js",
    "Scripts/Spa/core/router.js",
    "Scripts/Spa/util/logger.js",
    "Scripts/Spa/viewmodels/dashboardVM.js",
    "Scripts/Spa/viewmodels/homeVM.js",
    "Scripts/Spa/viewmodels/termsVM.js",
    "node_modules/js-logger/src/logger.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACl
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/*jshint node: true*/\r\n\r\n'use strict';\r\n\r\nvar logger = require('./util/logger'),\r\n    router = require('./core/router'),\r\n\r\n    start = function () {\r\n        logger.debug(\"app - start\");\r\n        router.start();\r\n    };\r\n\r\nstart();",
    "/*jshint node: true*/\r\n/*global window, $, kendo*/\r\n\r\n'use strict';\r\n\r\nvar logger = require('../util/logger'),\r\n    homeVM = require('../viewmodels/homeVM'),\r\n    termsVM = require('../viewmodels/termsVM'),\r\n    dashboardVM = require('../viewmodels/dashboardVM'),\r\n\r\n    layout = {\r\n        // kendo layout to add the views\r\n        mainLayout: new kendo.Layout('layout-tpl'),\r\n\r\n        // views templates\r\n        views: {\r\n            homeView: new kendo.View('custHome', {\r\n                model: homeVM,\r\n                show: function () {\r\n                    logger.debug(\"home template loaded\");\r\n                    window.makeSlick();\r\n                }\r\n            }),\r\n            termsView: new kendo.View('loyaltyTerms', {\r\n                model: termsVM,\r\n                show: function () {\r\n                    logger.debug(\"Terms page loaded\");\r\n                    termsVM.LoadCustomer();\r\n                }\r\n            }),\r\n            dashboardView: new kendo.View('dashboard', {\r\n                model: dashboardVM,\r\n                show: function () {\r\n                    logger.debug(\"Dashboard page loaded\");\r\n                }\r\n            })\r\n        }\r\n    };\r\n\r\nwindow.spavm = $.extend(window.spavm || {},\r\n{\r\n    logger: logger,\r\n    VMviews: layout.views\r\n});\r\n\r\nmodule.exports = layout;",
    "/*jshint node: true*/\r\n/*global window, $, kendo*/\r\n\r\n'use strict';\r\n\r\nvar layout = require('./layout'),\r\n    mainLayout = layout.mainLayout,\r\n    views = layout.views,\r\n\r\n    router = new kendo.Router({\r\n        init: function () {\r\n            mainLayout.render('#loyalty-app');\r\n        },\r\n        routeMissing: function () {\r\n            router.navigate('/');\r\n        }\r\n    });\r\n\r\n// routes\r\nrouter.route('/', function () {\r\n    mainLayout.showIn('#app-content', views.homeView);\r\n});\r\n\r\nrouter.route('/loyaltyTerms', function () {\r\n    mainLayout.showIn('#app-content', views.termsView);\r\n});\r\n\r\nrouter.route('/dashboard', function () {\r\n    mainLayout.showIn('#app-content', views.dashboardView);\r\n});\r\n\r\nwindow.spavm = $.extend(window.spavm || {},\r\n{\r\n    router: router\r\n});\r\n\r\nmodule.exports = router;",
    "/*jshint node: true*/\r\n\r\n\"use strict\";\r\n\r\nvar logger = require('js-logger');\r\n\r\nlogger.useDefaults({\r\n    defaultLevel: logger.WARN,\r\n    formatter: function (messages, context) {\r\n        messages.unshift(new Date().toUTCString());\r\n    }\r\n});\r\n\r\nmodule.exports = logger;",
    "/*jshint node: true*/\r\n/*global window, $, kendo, location, viewModelHelpers*/\r\n\r\n'use strict';\r\n\r\nvar logger = require('../util/logger');\r\n\r\nvar viewModel = {\r\n    x : 0,\r\n\r\n    dataSource : new kendo.data.DataSource({\r\n        data: [\r\n            { \"name\": \"[First name] [Last name]\", \"dataEnrolled\": \"09/09/2015\" },\r\n            { \"name\": \"[First name] [Last name]\", \"dataEnrolled\": \"09/09/2015\" },\r\n            { \"name\": \"[First name] [Last name]\", \"dataEnrolled\": \"09/09/2015\" },\r\n            { \"name\": \"[First name] [Last name]\", \"dataEnrolled\": \"09/09/2015\" }\r\n        ]\r\n    }),\r\n\r\n    showData :function (e) {\r\n        $(e.currentTarget).toggleClass(\"closed\");\r\n    },\r\n\r\n    onSelect: function (e) {\r\n        var childs = $(e.currentTarget).children();\r\n        childs.removeClass();\r\n        var element = \"\";\r\n        var actual = e.target;\r\n        do {\r\n            if ($.inArray(actual, childs) != -1)\r\n                element = actual;\r\n            else\r\n                actual = actual.parentElement;\r\n        } while (element === \"\");\r\n        $(element).addClass(\"selected\");\r\n    } \r\n};\r\n\r\nmodule.exports = viewModelHelpers.mvvmUtil.asObservable(viewModel);",
    "/*jshint node: true*/\r\n/*global window, $, kendo*/\r\n\r\n'use strict';\r\n\r\nvar instance = kendo.observable({\r\n    rewardsSource: new kendo.data.DataSource({\r\n        transport: {\r\n            read: {\r\n                url: '/api/Program/GetHighValueRewards',\r\n                async: false,\r\n                dataType: 'json'\r\n            }\r\n        }\r\n    })\r\n});\r\n\r\nmodule.exports = instance;",
    "/*jshint node: true*/\r\n/*global window, $, kendo, location*/\r\n\r\n'use strict';\r\n\r\nvar logger = require('../util/logger'),\r\n\r\n    instance = kendo.observable({\r\n        id: \"0\",\r\n        firstName: \"John\",\r\n        lastName: \"Doe\",\r\n        email: \"email@example.com\",\r\n        goHLId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\",\r\n        hasAccepted: false,\r\n\r\n        LoadCustomer: function () {\r\n            var that = this;\r\n\r\n            $.ajax({\r\n                url: '/api/Program/GetCustomer',\r\n                type: 'json',\r\n                method: 'GET',\r\n                success: function (response) {\r\n                    that.set('id', response.Id);\r\n                    that.set('firstName', response.FirstName);\r\n                    that.set('lastName', response.LastName);\r\n                    that.set('email', response.Email);\r\n                    that.set('goHLId', response.GoHlCustomerId);\r\n                },\r\n                error: function (exception) {\r\n                    logger.error(exception);\r\n                }\r\n            });\r\n        },\r\n\r\n        Activate: function () {\r\n            var that = this;\r\n            var _custData = {\r\n                'Id': that.id,\r\n                'DistributorId': \"STAFF\",\r\n                'Email': that.email,\r\n                'FirstName': that.firstName,\r\n                'LastName': that.lastName,\r\n                'GoHlCustomerId': that.goHLId,\r\n                'LoyalityProgramId': \"B55A8979-08B5-E612-80C4-0015DDE1E511\"\r\n            };\r\n\r\n            $.ajax({\r\n                url: '/api/Program/ActivateProgram',\r\n                data: _custData,\r\n                type: 'json',\r\n                method: 'POST',\r\n                success: function (response) {\r\n                    location.href = '#/dashboard';\r\n                },\r\n                error: function (exception) {\r\n                    logger.error(exception);\r\n                }\r\n            });\r\n        },\r\n\r\n        EnableActive: function () {\r\n            return this.get('hasAccepted') && this.get('firstName') !== '' && this.get('lastName') !== '';\r\n        }\r\n    });\r\n\r\nmodule.exports = instance;",
    "/*!\r\n * js-logger - http://github.com/jonnyreeves/js-logger\r\n * Jonny Reeves, http://jonnyreeves.co.uk/\r\n * js-logger may be freely distributed under the MIT license.\r\n */\r\n(function (global) {\r\n\t\"use strict\";\r\n\r\n\t// Top level module for the global, static logger instance.\r\n\tvar Logger = { };\r\n\r\n\t// For those that are at home that are keeping score.\r\n\tLogger.VERSION = \"1.3.0\";\r\n\r\n\t// Function which handles all incoming log messages.\r\n\tvar logHandler;\r\n\r\n\t// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.\r\n\tvar contextualLoggersByNameMap = {};\r\n\r\n\t// Polyfill for ES5's Function.bind.\r\n\tvar bind = function(scope, func) {\r\n\t\treturn function() {\r\n\t\t\treturn func.apply(scope, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// Super exciting object merger-matron 9000 adding another 100 bytes to your download.\r\n\tvar merge = function () {\r\n\t\tvar args = arguments, target = args[0], key, i;\r\n\t\tfor (i = 1; i < args.length; i++) {\r\n\t\t\tfor (key in args[i]) {\r\n\t\t\t\tif (!(key in target) && args[i].hasOwnProperty(key)) {\r\n\t\t\t\t\ttarget[key] = args[i][key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n\t// Helper to define a logging level object; helps with optimisation.\r\n\tvar defineLogLevel = function(value, name) {\r\n\t\treturn { value: value, name: name };\r\n\t};\r\n\r\n\t// Predefined logging levels.\r\n\tLogger.DEBUG = defineLogLevel(1, 'DEBUG');\r\n\tLogger.INFO = defineLogLevel(2, 'INFO');\r\n\tLogger.TIME = defineLogLevel(3, 'TIME');\r\n\tLogger.WARN = defineLogLevel(4, 'WARN');\r\n\tLogger.ERROR = defineLogLevel(8, 'ERROR');\r\n\tLogger.OFF = defineLogLevel(99, 'OFF');\r\n\r\n\t// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently\r\n\t// of each other.\r\n\tvar ContextualLogger = function(defaultContext) {\r\n\t\tthis.context = defaultContext;\r\n\t\tthis.setLevel(defaultContext.filterLevel);\r\n\t\tthis.log = this.info;  // Convenience alias.\r\n\t};\r\n\r\n\tContextualLogger.prototype = {\r\n\t\t// Changes the current logging level for the logging instance.\r\n\t\tsetLevel: function (newLevel) {\r\n\t\t\t// Ensure the supplied Level object looks valid.\r\n\t\t\tif (newLevel && \"value\" in newLevel) {\r\n\t\t\t\tthis.context.filterLevel = newLevel;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Is the logger configured to output messages at the supplied level?\r\n\t\tenabledFor: function (lvl) {\r\n\t\t\tvar filterLevel = this.context.filterLevel;\r\n\t\t\treturn lvl.value >= filterLevel.value;\r\n\t\t},\r\n\r\n\t\tdebug: function () {\r\n\t\t\tthis.invoke(Logger.DEBUG, arguments);\r\n\t\t},\r\n\r\n\t\tinfo: function () {\r\n\t\t\tthis.invoke(Logger.INFO, arguments);\r\n\t\t},\r\n\r\n\t\twarn: function () {\r\n\t\t\tthis.invoke(Logger.WARN, arguments);\r\n\t\t},\r\n\r\n\t\terror: function () {\r\n\t\t\tthis.invoke(Logger.ERROR, arguments);\r\n\t\t},\r\n\r\n\t\ttime: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'start' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttimeEnd: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'end' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Invokes the logger callback if it's not being filtered.\r\n\t\tinvoke: function (level, msgArgs) {\r\n\t\t\tif (logHandler && this.enabledFor(level)) {\r\n\t\t\t\tlogHandler(msgArgs, merge({ level: level }, this.context));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Protected instance which all calls to the to level `Logger` module will be routed through.\r\n\tvar globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });\r\n\r\n\t// Configure the global Logger instance.\r\n\t(function() {\r\n\t\t// Shortcut for optimisers.\r\n\t\tvar L = Logger;\r\n\r\n\t\tL.enabledFor = bind(globalLogger, globalLogger.enabledFor);\r\n\t\tL.debug = bind(globalLogger, globalLogger.debug);\r\n\t\tL.time = bind(globalLogger, globalLogger.time);\r\n\t\tL.timeEnd = bind(globalLogger, globalLogger.timeEnd);\r\n\t\tL.info = bind(globalLogger, globalLogger.info);\r\n\t\tL.warn = bind(globalLogger, globalLogger.warn);\r\n\t\tL.error = bind(globalLogger, globalLogger.error);\r\n\r\n\t\t// Don't forget the convenience alias!\r\n\t\tL.log = L.info;\r\n\t}());\r\n\r\n\t// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments\r\n\t// object with the supplied log messages and the second being a context object which contains a hash of stateful\r\n\t// parameters which the logging function can consume.\r\n\tLogger.setHandler = function (func) {\r\n\t\tlogHandler = func;\r\n\t};\r\n\r\n\t// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.\r\n\t// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).\r\n\tLogger.setLevel = function(level) {\r\n\t\t// Set the globalLogger's level.\r\n\t\tglobalLogger.setLevel(level);\r\n\r\n\t\t// Apply this level to all registered contextual loggers.\r\n\t\tfor (var key in contextualLoggersByNameMap) {\r\n\t\t\tif (contextualLoggersByNameMap.hasOwnProperty(key)) {\r\n\t\t\t\tcontextualLoggersByNameMap[key].setLevel(level);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,\r\n\t// default context and log handler.\r\n\tLogger.get = function (name) {\r\n\t\t// All logger instances are cached so they can be configured ahead of use.\r\n\t\treturn contextualLoggersByNameMap[name] ||\r\n\t\t\t(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));\r\n\t};\r\n\r\n\t// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will\r\n\t// write to the window's console object (if present); the optional options object can be used to customise the\r\n\t// formatter used to format each log message.\r\n\tLogger.createDefaultHandler = function (options) {\r\n\t\toptions = options || {};\r\n\r\n\t\toptions.formatter = options.formatter || function defaultMessageFormatter(messages, context) {\r\n\t\t\t// Prepend the logger's name to the log message for easy identification.\r\n\t\t\tif (context.name) {\r\n\t\t\t\tmessages.unshift(\"[\" + context.name + \"]\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments\r\n\t\t// that don't offer a native console method.\r\n\t\tvar timerStartTimeByLabelMap = {};\r\n\r\n\t\t// Support for IE8+ (and other, slightly more sane environments)\r\n\t\tvar invokeConsoleMethod = function (hdlr, messages) {\r\n\t\t\tFunction.prototype.apply.call(hdlr, console, messages);\r\n\t\t};\r\n\r\n\t\t// Check for the presence of a logger.\r\n\t\tif (typeof console === \"undefined\") {\r\n\t\t\treturn function () { /* no console */ };\r\n\t\t}\r\n\r\n\t\treturn function(messages, context) {\r\n\t\t\t// Convert arguments object to Array.\r\n\t\t\tmessages = Array.prototype.slice.call(messages);\r\n\r\n\t\t\tvar hdlr = console.log;\r\n\t\t\tvar timerLabel;\r\n\r\n\t\t\tif (context.level === Logger.TIME) {\r\n\t\t\t\ttimerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];\r\n\r\n\t\t\t\tif (messages[1] === 'start') {\r\n\t\t\t\t\tif (console.time) {\r\n\t\t\t\t\t\tconsole.time(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttimerStartTimeByLabelMap[timerLabel] = new Date().getTime();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (console.timeEnd) {\r\n\t\t\t\t\t\tconsole.timeEnd(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinvokeConsoleMethod(hdlr, [ timerLabel + ': ' +\r\n\t\t\t\t\t\t\t(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Delegate through to custom warn/error loggers if present on the console.\r\n\t\t\t\tif (context.level === Logger.WARN && console.warn) {\r\n\t\t\t\t\thdlr = console.warn;\r\n\t\t\t\t} else if (context.level === Logger.ERROR && console.error) {\r\n\t\t\t\t\thdlr = console.error;\r\n\t\t\t\t} else if (context.level === Logger.INFO && console.info) {\r\n\t\t\t\t\thdlr = console.info;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toptions.formatter(messages, context);\r\n\t\t\t\tinvokeConsoleMethod(hdlr, messages);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Configure and example a Default implementation which writes to the `window.console` (if present).  The\r\n\t// `options` hash can be used to configure the default logLevel and provide a custom message formatter.\r\n\tLogger.useDefaults = function(options) {\r\n\t\tLogger.setLevel(options && options.defaultLevel || Logger.DEBUG);\r\n\t\tLogger.setHandler(Logger.createDefaultHandler(options));\r\n\t};\r\n\r\n\t// Export to popular environments boilerplate.\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(Logger);\r\n\t}\r\n\telse if (typeof module !== 'undefined' && module.exports) {\r\n\t\tmodule.exports = Logger;\r\n\t}\r\n\telse {\r\n\t\tLogger._prevLogger = global.Logger;\r\n\r\n\t\tLogger.noConflict = function () {\r\n\t\t\tglobal.Logger = Logger._prevLogger;\r\n\t\t\treturn Logger;\r\n\t\t};\r\n\r\n\t\tglobal.Logger = Logger;\r\n\t}\r\n}(this));\r\n"
  ]
}